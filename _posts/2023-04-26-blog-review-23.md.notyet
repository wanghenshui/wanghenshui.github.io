---
layout: post
title: blog review 第二十三期
categories: [review]
tags: [doris,scd,sql,mq,vsr]
---
最近感悟

为什么他能想到我想不到，是我笨吗，睡眠不足导致智力下降了？我需要休息一年吗？

有时候感觉左眼不是很舒服，感觉是总看屏幕左边看的

同龄人已经都飞黄腾达了，我还是原地踏步，仔细想来，今年刷手机的频率明显比前几年高了，手机也离眼睛越来越近了。

手机成瘾症，我给自己的手机设置了使用时间限制，根本没用，拦不住玩手机的冲动

睡觉前还要玩一个小时手机，脑子总是兴奋状态，嘻嘻哈哈的状态。不看其实也没啥事，就是忍不住想看。然后还主动去刷，去找乐子。感觉明显是上瘾了。

感觉得返璞归真一下，买个辣鸡手机，打开微信都卡的，控制玩手机的欲望

<!-- more -->

---
## [doris案例集](https://selectdb.feishu.cn/docx/doxcnm0uTBWFTc4Qn9A1WHuqrcg)

很丰富，长了见识

## [缓慢变化维度的处理](https://zhuanlan.zhihu.com/p/345881522)

Slowly Changing Dimension https://en.wikipedia.org/wiki/Slowly_changing_dimension

增加列，增加列属性，增加历史表，感觉不如mongo

我是看这个 [So you want Slowly Changing Dimension?](https://www.dolthub.com/blog/2023-06-22-slowly-changing-dimension/) 了解到的

有点版本的感觉。麻烦

## [消息队列设计精要](https://zhuanlan.zhihu.com/p/21649950)

文章写的很好

## [Software Performance and Class Layout](https://johnnysswlab.com/software-performance-and-class-layout/?utm_source=feedly&utm_medium=rss&utm_campaign=software-performance-and-class-layout)

这哥们的博客我准备翻一遍


这个讲的是局部性问题

比如

```c++
class my_class {
   int a;
   int b;
   ...
   int z;
};
int sum_all(my_class* m, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += m[i].a + m[i].z;
    }
    return sum;
}
```

循环用到了a和z，那么a和z就应该靠近点

```cpp
class my_class {
   int a;
   int z;
   int b;
   ...
};
```

用不到的拆出来

```cpp
class my_class {
   int m1;
   int m2;
   int m3;
};
int sum_all(my_class* m, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += m[i].m1 + m[i].m2;
    }
    return sum;
}
```

没用到m3，那就把它拿出来

```cpp
class my_class_base {
   int m1;
   int m2;
};
class my_class_aux {
   int m3;
};
int sum_all(my_class_base* m, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += m[i].m1 + m[i].m2;
    }
    return sum;
}
```

同理，如果两个类有互相使用，就放在一起

```cpp
class my_class1 {
    int m1;
    int m2;
};
class my_class2 {
    int a1;
    int a2;
}
int sum_all(my_class1* m1, my_class2* m2, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += m1[i].m1 + m1[i].m2 + m2[i].a1;
    }
    return sum;
}
```

改成 
```cpp
class my_class1 {
    int m1;
    int m2;
    int a1;
};
class my_class2 {
    int a2;
};
int sum_all(my_class1* m1, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += m1[i].m1 + m1[i].m2 + m1[i].a1;
    }
    return sum;
}
```

不要循环中访问指针
```cpp
class my_class {
   int m1;
   int* p_a1;
};
int sum_all(my_class* m, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += m[i].m1 + *m[i].p_a1;
    }
    return sum;
}
```

这个pa1非常不合理，应该改成值

再比如这种猥琐的公用

```cpp
class shared {
    int a1;
};
class my_class_1 {
   int m1;
   shared* s;
};
class my_class_2 {
   int m1;
   shared* s;
};
int sum_all_1(my_class_1* m, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += m[i].m1 + m[i].s->a1;
    }
    return sum;
}
int sum_all_2(my_class_2* m, int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += m[i].m1 + m[i].s->a1;
    }
    return sum;
}
```

更新s省事了但是实际上循环访问低效，也得改成值

Structure Of Arrays (SOA)结构体数组改成数组结构体

把数据集改小，比如
```cpp
class big_class {
   int index;
   ...
};
void my_sort(std::vector<big_class>& v) {
    std::sort(v.begin(), v.end(), [](const big_class& l, const big_class& r) { return l.index < r.index; });
}
```

一堆不相关的数据参与了数据加载，可以改成这个
```cpp
class small_class {
    int index;
    int pointer;
};
void my_sort(std::vector<big_class>& v) {
    std::vector<small_class> tmp;
    tmp.reserve(v.size());
    for (int i = 0; i < v.size(); i++) {
        tmp.push_back({v[i].index, i});
    }
    std::sort(tmp.begin(), tmp.end(), [](const small_class& l, const small_class& r) { return l.index < r.index; });
    std::vector<big_class> result;
    result.reserve(tmp.size());
    for (int i = 0; i < tmp.size(); i++) {
        result.push_back(v[tmp[i].index]);
    }
    v = std::move(result);
}
```

这种改法得测量一下，未必有收益，可能有，但不多，主要取决于数据结构，只要bigclass比smallclass大很多的话，收益肯定是有的

## [ViewStamped replication revisited](https://zhuanlan.zhihu.com/p/66984202)
[Viewstamped Replication Revisited简要翻译](https://zhuanlan.zhihu.com/p/66427412)

整的挺好，我画个图联系一下mermaid

{% include_relative mermaid.html source="mmd/vr.mmd" %}

## libgavran

写的挺好，数据库学习入门

https://github.com/ayende/libgavran/blob/master/ch02/ch02.adoc